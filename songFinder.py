# -*- coding: utf-8 -*-
"""SongFinder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GEZ1dlnAa-ZGCFeoEYxsDCEqjHdKMrur
"""

# from google.colab import drive
# drive.mount('/content/drive')
st.write(1212)
import sys
print(sys.executable)
import os
import numpy as np
import pandas as pd
import math
import pickle
import librosa

def cosineSim(a,b):
  return(np.dot(a,b)/(np.linalg.norm(a) * np.linalg.norm(b)))

def compare(songA, songB):
  cosines = []
  for aValue, bValue in zip(songA.values(), songB.values()):
    aValue = aValue.reshape(-1)
    bValue = bValue.reshape(-1)
    smallerLen = min(len(aValue), len(bValue))
    cosines.append(cosineSim(aValue[0:smallerLen], bValue[0:smallerLen]))
  return cosines

def compareSingleFeature(feature1, feature2):
  cosines = []
  feature1 = feature1.reshape(-1)
  feature2 = feature2.reshape(-1)
  if(len(feature1) >= len(feature2)):
    longerFeature = feature1
    shorterFeature = feature2
  else:
    longerFeature = feature2
    shorterFeature = feature1
  shorterFeature = np.repeat(shorterFeature, math.ceil(len(longerFeature)/len(shorterFeature)))
  return cosineSim(longerFeature[0:len(longerFeature)], shorterFeature[0:len(longerFeature)])

def extractFeatures(songName, features = ['x', 'X', 'zero_crossings', 'spectral_centroids', 'spectral_rolloff', 'mfccs']): #song name without extension
  #audio_path = '/content/drive/My Drive/Colab Notebooks/audioAnalytics/songs/' + songName + '.mp3'
  audio_path = songName + '.mp3'
  res = {}
  x , sr = librosa.load(audio_path, sr = None) #using the native sampling rate 44100Hz, which is commonly used in digital audio
  if('x' in features):
    res['x'] = x
  if('X' in features):
    X = librosa.stft(x)
    res['X'] = X
  if('zero_crossings' in features):
    zero_crossings = librosa.zero_crossings(x, pad=False)
    res['zero_crossings'] = zero_crossings
  if('spectral_centroids' in features):
    spectral_centroids = librosa.feature.spectral_centroid(y = x, sr=sr)[0]
    res['spectral_centroids'] = spectral_centroids
  if('spectral_rolloff' in features):
    spectral_rolloff = librosa.feature.spectral_rolloff(y = x, sr=sr)[0]
    res['spectral_rolloff'] = spectral_rolloff
  if('mfccs' in features):
    mfccs = librosa.feature.mfcc(y = x, sr=sr)
    res['mfccs'] = mfccs
  return res

from os import listdir
from os.path import isfile, join
import os
#songsFolder = '/content/drive/My Drive/Colab Notebooks/audioAnalytics/songs'
songsFolder = os.getcwd()
# st.write(songsFolder)
# st.write(os.listdir(songsFolder))
#onlyFiles = [f.replace('.mp3', '') for f in listdir(songsFolder) if isfile(join(songsFolder, f))]
with open('onlyFiles.pkl', 'rb') as f:
    onlyFiles = pickle.load(f)

# allFeatures = []
# for i in range(len(onlyFiles)):
#   allFeatures.append(extractFeatures(onlyFiles[i]))
# load allFeatures to drive

import pickle

# Save the allFeatures list to a file in your Google Drive
#with open('/content/drive/My Drive/Colab Notebooks/audioAnalytics/allFeatures.pkl', 'rb') as f:
with open('allFeatures.pkl', 'rb') as f:
    allFeatures = pickle.load(f)

onlyFiles.append('uploadedSong')
allFeatures.append(extractFeatures(onlyFiles[-1], ['spectral_centroids']))

def singleFeatureComparisons(featureName, targetSongIndex = None):
  featureDc = {}
  for i in range(len(allFeatures)):
    featureDc[onlyFiles[i]] = allFeatures[i][featureName]
  featureComparisons = {}
  for i in range(len(onlyFiles)):
    #featureComparisons[onlyFiles[i]] = compare(featureDc[onlyFiles[targetSongIndex]], featureDc[onlyFiles[i]]
    featureComparisons[onlyFiles[i]] = compareSingleFeature(featureDc[onlyFiles[targetSongIndex]], featureDc[onlyFiles[i]])
  #sorted_featureComparisons = dict(sorted(featureComparisons.items(), key=lambda item: item[1][0], reverse=True))
  sorted_featureComparisons = dict(featureComparisons.items())
  return sorted_featureComparisons
  #return featureComparisons

featureNames = ['x', 'X', 'zero_crossings', 'spectral_centroids', 'spectral_rolloff', 'mfccs']

dfLs = []
featureNames = ['spectral_centroids']
for f in featureNames:
  dfLs.append(singleFeatureComparisons(f, len(allFeatures)-1))
print(dfLs)

# prompt: sort all values in dfLs[0] descending order, keeping both the key and the value, then only print the second through fourth keys and values, fully extend the values in pandas

import pandas as pd

# Assuming dfLs[0] is a dictionary
sorted_dict = dict(sorted(dfLs[0].items(), key=lambda item: item[1], reverse=True))

# Convert the dictionary to a pandas Series for easier slicing and printing
series = pd.Series(sorted_dict, name='top 3 similarities')

# Print the second through fourth keys and values, fully extending the values
print(series[1:4].to_frame().to_string())
f = open(os.getcwd()+ "//songRecs.txt", "w")
for i in range(3):
    f.write(series[1:4].index[i]+'\n')
f.close()

